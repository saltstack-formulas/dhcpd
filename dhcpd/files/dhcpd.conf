# dhcpd.conf
#
# SaltStack-generated configuration file for ISC dhcpd
#

{%- set customized = {} %}
{%- set types_to_quote = ['string', 'text'] %}
{%- set quote = '' %}
{%- set dquote = '"' %}
{% if salt['pillar.get']('dhcpd:customized_options', False) -%}
{%- set customized = salt['pillar.get']('dhcpd:customized_options', {}) %}
# Customized dhcp options
  {%- for name, data in customized.items() %}
option {{ name|replace('_', '-') }} code {{ data.code }} = {{ data.type }};
  {%- endfor %}
{% endif -%}

# option definitions common to all supported networks...
{% if salt['pillar.get']('dhcpd:domain_name', False) -%}
option domain-name "{{ salt['pillar.get']('dhcpd:domain_name') }}";
{% endif -%}
{% if salt['pillar.get']('dhcpd:domain_name_servers', False) -%}
option domain-name-servers
  {%- for dns_server in salt['pillar.get']('dhcpd:domain_name_servers') %} {{ dns_server }}
    {%- if not loop.last %},{% else %};{% endif %}
  {%- endfor %}
{% endif -%}
{% if salt['pillar.get']('dhcpd:subnet_mask', False) -%}
option subnet-mask {{ salt['pillar.get']('dhcpd:subnet_mask') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:routers', False) -%}
option routers
  {%- for router in salt['pillar.get']('dhcpd:routers') %} {{ router }}
    {%- if not loop.last %},{% else %};{% endif %}
  {%- endfor %}
{% endif -%}
{% if salt['pillar.get']('dhcpd:domain_search', False) -%}
option domain-search {{ dquote }}{{ '" , "'.join(salt['pillar.get']('dhcpd:domain_search', [])) }}{{ dquote }};
{% endif -%}

{% if salt['pillar.get']('dhcpd:default_lease_time', False) -%}
default-lease-time {{ salt['pillar.get']('dhcpd:default_lease_time') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:max_lease_time', False) -%}
max-lease-time {{ salt['pillar.get']('dhcpd:max_lease_time') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:one_lease_per_client', False) -%}
one-lease-per-client {{ salt['pillar.get']('dhcpd:one_lease_per_client') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:get_lease_hostnames', False) -%}
get-lease-hostnames {{ salt['pillar.get']('dhcpd:get_lease_hostnames') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:server_identifier') -%}
server-identifier {{ salt['pillar.get']('dhcpd:server_identifier') }};
{% endif -%}
{% if salt['pillar.get']('dhcpd:server_name') -%}
server-name {{ dquote }}{{ salt['pillar.get']('dhcpd:server_name') }}{{ dquote }};
{% endif -%}
{%- if salt['pillar.get']('dhcpd:use_host_decl_names', False) %}
use-host-decl-names on;
{%- else %}
#use-host-decl-names off;
{%- endif %}

{%- if salt['pillar.get']('dhcpd:allow', False) %}
  {%- set allow = salt['pillar.get']('dhcpd:allow') %}
  {%- if allow is iterable and allow is not string %}
    {%- for item in allow %}allow {{ item }};{%- endfor %}
  {%- else %}allow {{ allow }};
  {%- endif %}
{%- endif %}

{%- if salt['pillar.get']('dhcpd:deny', False) %}
  {%- set deny = salt['pillar.get']('dhcpd:deny') %}
  {%- if deny is iterable and deny is not string %}
    {%- for item in deny %}
deny {{ item }};
{%- endfor %}
  {%- else %}deny {{ deny }};
  {%- endif %}
{%- endif %}

# Use this to enble / disable dynamic dns updates globally.
{%- if salt['pillar.get']('dhcpd:ddns_update_style', False) %}
ddns-update-style {{ salt['pillar.get']('dhcpd:ddns_update_style') }};
{%- else %}
#ddns-update-style none;
{%- endif %}

{%- if salt['pillar.get']('dhcpd:ddns_domainname', '') %}
ddns-domainname "{{ salt['pillar.get']('dhcpd:ddns_domainname') }}";
{%- endif %}

{%- if salt['pillar.get']('dhcpd:update_static_leases', False) %}
update-static-leases on;
{%- else %}
#update-static-leases off;
{%- endif %}

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
{%- if salt['pillar.get']('dhcpd:authoritative', False) %}
authoritative;
{%- else %}
#authoritative;
{%- endif %}

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
{%- if salt['pillar.get']('dhcpd:log_facility', False) %}
log-facility {{ salt['pillar.get']('dhcpd:log_facility') }};
{%- endif %}

{%- for option in customized.keys() %}
  {%- if option in salt['pillar.get']('dhcpd') %}
    {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
option {{ option|replace('_', '-') }} {{ quote }}{{ salt['pillar.get']('dhcpd:' ~ option) }}{{ quote }};
  {%- endif %}
{%- endfor %}

{%- for class, config in salt['pillar.get']('dhcpd:classes', {}).items() %}
  {%- if config.has_key('comment') %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
class "{{ class }}" {
  {%- if config.has_key('match') %}
  match {{ config.match }};
  {%- endif %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{%- endfor %}

{%- for failover_peer, config in salt['pillar.get']('dhcpd:failover_peers', {}).items() %}
  {%- if config.has_key('comment') %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
failover peer "{{ failover_peer }}" {
  {%- if config.has_key('primary') %}
  primary;
  {%- elif config.has_key('secondary') %}
  secondary;
  {%- endif %}
  {%- if config.has_key('address') %}
  address {{ config.address }};
  {%- endif %}
  {%- if config.has_key('port') %}
  port {{ config.port }};
  {%- endif %}
  {%- if config.has_key('peer_address') %}
  peer address {{ config.peer_address }};
  {%- endif %}
  {%- if config.has_key('peer_port') %}
  peer port {{ config.port }};
  {%- endif %}
  {%- if config.has_key('max_response_delay') %}
  max-response-delay {{ config.max_response_delay }};
  {%- endif %}
  {%- if config.has_key('max_unacked_updates') %}
  max-unacked-updates {{ config.max_unacked_updates }};
  {%- endif %}
  {%- if config.has_key('mclt') %}
  mclt {{ config.mclt }};
  {%- endif %}
  {%- if config.has_key('split') %}
  split {{ config.split }};
  {%- elif config.has_key('hba') %}
  hba {{ config.hba }};
  {%- endif %}
  {%- if config.has_key('load_balance_max_seconds') %}
  load balance max seconds {{ config.load_balance_max_seconds }};
  {%- endif %}
  {%- if config.has_key('max_lease_misbalance') %}
  max-lease-misbalance {{ config.max_lease_misbalance }};
  {%- endif %}
  {%- if config.has_key('max_lease_ownership') %}
  max-lease-ownership {{ config.max_lease_ownership }};
  {%- endif %}
  {%- if config.has_key('min_balance') %}
  min-balance {{ config.min_balance }};
  {%- endif %}
  {%- if config.has_key('max-balance') %}
  max-balance {{ config.max_balance }};
  {%- endif %}
}
{%- endfor %}

{%- set intendation='' %}
{%- for key, config in salt['pillar.get']('dhcpd:keys', {}).items() %}
key {{ key }} {
  {%- if config.has_key('algorithm') %}
  algorithm {{ config.algorithm }};
  {%- endif %}
  {%- if config.has_key('secret') %}
  secret {{ config.secret }};
  {%- endif %}
}
{%- endfor %}

{%- for zone, config in salt['pillar.get']('dhcpd:zones', {}).items() %}
zone {{ zone }} {
  {%- if config.has_key('primary') %}
  primary {{ config.primary }};
  {%- endif %}
  {%- if config.has_key('key') %}
  key {{ config.key }};
  {%- endif %}
}
{%- endfor %}

{%- for subnet, config in salt['pillar.get']('dhcpd:subnets', {}).items() %}
{%- include 'dhcpd/files/subnet.jinja' with context %}
{%- endfor %}

{% for host, config in salt['pillar.get']('dhcpd:hosts', {}).items() %}
  {%- if config.has_key('comment') %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
host {{ host }} {
  {%- if config.has_key('allow') %}
    {%- if config.allow is iterable and config.allow is not string %}
      {%- for item in config.allow %}allow {{ item }};{%- endfor %}
    {%- else %}allow {{ config.allow }};{%- endif %}
  {%- endif %}
  {%- if config.has_key('deny') %}
    {%- if config.deny is iterable and config.deny is not string %}
      {%- for item in config.deny %}deny {{ item }};{%- endfor %}
    {%- else %}deny {{ config.deny }};{%- endif %}
  {%- endif %}
  {%- if config.has_key('hardware') %}
  hardware {{ config.hardware }};
  {%- endif %}
  {%- if config.has_key('fixed_address') %}
    {%- if config.fixed_address|is_list %}
  fixed-address {{ config.fixed_address|join(',') }};
    {%- else %}
  fixed-address {{ config.fixed_address }};
    {%- endif %}
  {%- endif %}
  {%- if config.has_key('filename') %}
  filename "{{ config.filename }}";
  {%- endif %}
  {%- if config.has_key('server_name') %}
  server-name "{{ config.server_name }}";
  {%- endif %}
  {%- if config.has_key('host_name') %}
  option host-name "{{ config.host_name }}";
  {%- endif %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{% endfor %}
{%- for shared_network, config in salt['pillar.get']('dhcpd:shared_networks', {}).items() %}
  {%- if config.has_key('comment') %}
    {%- for line in config.comment.splitlines() %}
# {{ line }}
    {%- endfor %}
  {%- endif %}
shared-network {{ shared_network }} {
{%- set intendation='  ' %}
  {%- for subnet, config in salt['pillar.get'](
      'dhcpd:shared_networks:{0}:subnets'.format(shared_network), {}).items() %}
    {%- include 'dhcpd/files/subnet.jinja' with context %}
  {%- endfor %}
  {%- for pool in salt['pillar.get'](
      'dhcpd:shared_networks:{0}:pools'.format(shared_network), []) %}
  pool {
    {%- if pool.has_key('allow') %}
    allow {{ pool.allow }};
    {%- elif pool.has_key('deny') %}
    deny {{ pool.deny }};
    {%- endif %}
    {%- if pool.has_key('range') %}
    range {{ pool.range[0] }} {{ pool.range[1] }};
    {%- endif %}
  }
  {%- endfor %}
  {%- for option in customized.keys() %}
    {%- if option in config %}
     {%- if customized[option]['type'] in types_to_quote %} {% set quote = dquote %} {%- endif %}
  option {{ option|replace('_', '-') }} {{ quote }}{{ config.get(option) }}{{ quote }};
    {%- endif %}
  {%- endfor %}
}
{%- endfor %}
